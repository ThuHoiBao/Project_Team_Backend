import mongoose from "mongoose";
import { AddressDelivery, IAddressDelivery } from "../models/AddressDelivery";
import User from "../models/User";

async function seedAddressDeliveries() {
  try {
    await mongoose.connect("mongodb://127.0.0.1:27017/DB_02");

    // Xo√° d·ªØ li·ªáu c≈©
    await AddressDelivery.deleteMany({});
    console.log("ƒê√£ xo√° d·ªØ li·ªáu AddressDelivery c≈© ‚úÖ");

    // Reset field AddressDelivery trong User
    await User.updateMany({}, { $set: { AddressDelivery: [] } });

    // L·∫•y t·∫•t c·∫£ user
    const users = await User.find({});
    console.log(`T√¨m th·∫•y ${users.length} user`);

    for (const user of users) {
      const seedData: Partial<IAddressDelivery>[] = [
        {
          user: user._id as mongoose.Types.ObjectId,
          address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
          fullName: user.fullName || `${user.firstName} ${user.lastName}` || "Nguy·ªÖn VƒÉn A",
          phoneNumber: "0901234567",
          isDefault: true,
        },
        {
          user: user._id as mongoose.Types.ObjectId,
          address: "456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 3, TP.HCM",
          fullName: user.fullName || `${user.firstName} ${user.lastName}` || "Nguy·ªÖn VƒÉn A",
          phoneNumber: "0917654321",
          isDefault: false,
        },
      ];

      // Th√™m v√†o AddressDelivery collection
      const createdAddresses = await AddressDelivery.insertMany(seedData);

      // L·∫•y _id c·ªßa c√°c AddressDelivery
      const addressIds = createdAddresses.map((addr) => addr._id);

      // Update v√†o User
      await User.findByIdAndUpdate(user._id, {
        $set: { AddressDelivery: addressIds },
      });
    }

    await mongoose.disconnect();
    console.log("Seeder AddressDelivery xong üéâ");
  } catch (error) {
    console.error("L·ªói AddressDelivery Seeder:", error);
  }
}

seedAddressDeliveries();
