// import Chat, { ChatRole } from "../models/chat";
// import axios from "axios";

// // API Gemini URL
// const API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDvTgPpiOUcmeEFQBoSg6CvNyksz53vkpw";

// // L∆∞u tin nh·∫Øn v√†o MongoDB
// const saveMessage = async (userId: string, message: string, role: ChatRole) => {
//   const chatMessage = new Chat({
//     userId,
//     comment: message,
//     role,
//   });

//   return await chatMessage.save();
// };

// // G·ª≠i tin nh·∫Øn ƒë·∫øn API Gemini ƒë·ªÉ chatbot tr·∫£ l·ªùi
// const getChatbotResponse = async (message: string) => {
//   try {
//     const response = await axios.post(API_URL, {
//       contents: [
//         {
//           role: "user",
//           parts: [{ text: message }],
//         },
//       ],
//     });

//     const data = await response.data;
//     return data.candidates[0].content.parts[0].text;
//   } catch (error) {
//     console.error("Error calling Gemini API:", error);
//     return "I'm sorry, I couldn't understand your question.";
//   }
// };

// // L·∫•y l·ªãch s·ª≠ tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng t·ª´ MongoDB
// const getChatHistory = async (userId: string) => {
//   return await Chat.find({ userId }).sort({ date: 1 });
// };

// export default { saveMessage, getChatbotResponse, getChatHistory };
import Chat, { ChatRole } from "../models/chat";
import axios from "axios";

const API_KEY = "AIzaSyDvTgPpiOUcmeEFQBoSg6CvNyksz53vkpw";
const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`;

// üîπ D·ªØ li·ªáu train n·ªôi b·ªô c·ªßa shop
// trainingData.ts
export const trainingData = [
  // üè™ Gi·ªõi thi·ªáu chung
  {
    question: [
      "ute shop l√† g√¨",
      "shop b·∫°n l√† ai",
      "b·∫°n l√† chatbot g√¨",
      "shop ho·∫°t ƒë·ªông ·ªü ƒë√¢u",
      "shop c√≥ th·∫≠t kh√¥ng"
    ],
    answer:
      "UTE Shop l√† c·ª≠a h√†ng th·ªùi trang ch√≠nh th·ª©c c·ªßa Tr∆∞·ªùng ƒê·∫°i h·ªçc S∆∞ ph·∫°m K·ªπ thu·∫≠t TP.HCM üéì. Shop chuy√™n b√°n √°o kho√°c, √°o thun, √°o s∆° mi v√† ph·ª• ki·ªán c√°c khoa. M√¨nh l√† Chatbot c·ªßa UTE Shop, gi√∫p b·∫°n tra c·ª©u th√¥ng tin, ƒë·∫∑t h√†ng v√† h·ªó tr·ª£ nhanh ch√≥ng ü§ñ."
  },

  // üß• Danh m·ª•c s·∫£n ph·∫©m
  {
    question: [
      "shop b√°n g√¨",
      "shop c√≥ nh·ªØng lo·∫°i √°o n√†o",
      "danh m·ª•c s·∫£n ph·∫©m",
      "shop c√≥ nh·ªØng lo·∫°i h√†ng g√¨",
      "c√°c lo·∫°i √°o ·ªü shop"
    ],
    answer:
      "UTE Shop hi·ªán c√≥ 3 danh m·ª•c ch√≠nh:\n1Ô∏è‚É£ √Åo kho√°c khoa (logo t·ª´ng khoa)\n2Ô∏è‚É£ √Åo thun khoa (cotton 100%)\n3Ô∏è‚É£ √Åo s∆° mi khoa (th√™u logo tinh t·∫ø)\nNgo√†i ra, c√≤n c√≥ ph·ª• ki·ªán nh∆∞ n√≥n, t√∫i tote, m√≥c kh√≥a sinh vi√™n üéí."
  },

  // üî• S·∫£n ph·∫©m b√°n ch·∫°y
  {
    question: [
      "s·∫£n ph·∫©m b√°n ch·∫°y",
      "√°o n√†o ƒë∆∞·ª£c mua nhi·ªÅu nh·∫•t",
      "top s·∫£n ph·∫©m n·ªïi b·∫≠t",
      "√°o hot trend",
      "s·∫£n ph·∫©m hot"
    ],
    answer:
      "C√°c s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t t·∫°i UTE Shop g·ªìm:\n‚≠ê √Åo kho√°c khoa C√¥ng Ngh·ªá Th√¥ng Tin (m√†u navy)\n‚≠ê √Åo thun khoa C∆° Kh√≠ (ƒëen)\n‚≠ê √Åo s∆° mi khoa Kinh T·∫ø (tr·∫Øng)\nT·∫•t c·∫£ ƒë·ªÅu l√† l·ª±a ch·ªçn h√†ng ƒë·∫ßu c·ªßa sinh vi√™n UTE üíô."
  },

  // üí∞ Gi√° b√°n & size
  {
    question: [
      "√°o c√≥ m·∫•y size",
      "size n√†o v·ª´a",
      "b·∫£ng size √°o",
      "gi√° bao nhi√™u",
      "√°o thun gi√° bao nhi√™u"
    ],
    answer:
      "C√°c s·∫£n ph·∫©m c·ªßa UTE Shop c√≥ ƒë·ªß size: S, M, L, XL, XXL.\nüí∏ Gi√° tham kh·∫£o:\n- √Åo kho√°c: 250.000ƒë\n- √Åo thun: 180.000ƒë\n- √Åo s∆° mi: 230.000ƒë\nT√πy ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i, gi√° c√≥ th·ªÉ thay ƒë·ªïi nh·∫π nh√©!"
  },

  // üëï √Åo kho√°c
  {
    question: [
      "√°o kho√°c c√≥ m·∫•y lo·∫°i",
      "√°o kho√°c c·ªßa khoa n√†o",
      "ch·∫•t li·ªáu √°o kho√°c",
      "√°o kho√°c c√≥ logo kh√¥ng"
    ],
    answer:
      "√Åo kho√°c c·ªßa UTE Shop g·ªìm nhi·ªÅu m·∫´u theo t·ª´ng khoa (CNTT, C∆° Kh√≠, ƒêi·ªán - ƒêi·ªán T·ª≠, Kinh T·∫ø...). Ch·∫•t li·ªáu n·ªâ b√¥ng d√†y d·∫∑n, th·∫•m h√∫t m·ªì h√¥i, logo khoa ƒë∆∞·ª£c in/th√™u r√µ n√©t üß•."
  },

  // üëï √Åo thun
  {
    question: [
      "√°o thun c·ªßa shop c√≥ m·∫•y m√†u",
      "√°o thun ch·∫•t li·ªáu g√¨",
      "√°o thun c√≥ in logo kh√¥ng",
      "√°o thun khoa cntt"
    ],
    answer:
      "√Åo thun UTE Shop l√†m b·∫±ng cotton 100%, co gi√£n t·ªët, m√†u s·∫Øc ƒëa d·∫°ng (ƒëen, tr·∫Øng, xanh navy, ƒë·ªè ƒë√¥). C√≥ in logo c√°c khoa nh∆∞ CNTT, C∆° Kh√≠, ƒêi·ªán - ƒêi·ªán T·ª≠, Kinh T·∫ø... üëï."
  },

  // üëî √Åo s∆° mi
  {
    question: [
      "√°o s∆° mi c√≥ m·∫•y m·∫´u",
      "√°o s∆° mi c√≥ m√†u g√¨",
      "√°o s∆° mi c·ªßa khoa n√†o",
      "√°o s∆° mi form g√¨"
    ],
    answer:
      "√Åo s∆° mi UTE Shop c√≥ m·∫´u tay ng·∫Øn v√† tay d√†i, m√†u tr·∫Øng ho·∫∑c xanh nh·∫°t, form slimfit l·ªãch s·ª±. Logo khoa ƒë∆∞·ª£c th√™u tinh t·∫ø ·ªü ng·ª±c tr√°i üëî."
  },

  // üì¶ ƒê·∫∑t h√†ng
  {
    question: [
      "l√†m sao ƒë·∫∑t h√†ng",
      "mua h√†ng nh∆∞ th·∫ø n√†o",
      "shop c√≥ b√°n online kh√¥ng",
      "h∆∞·ªõng d·∫´n ƒë·∫∑t √°o"
    ],
    answer:
      "B·∫°n c√≥ th·ªÉ ƒë·∫∑t h√†ng qua app ho·∫∑c website c·ªßa UTE Shop. Ch·ªçn s·∫£n ph·∫©m ‚Üí ch·ªçn size ‚Üí th√™m v√†o gi·ªè h√†ng ‚Üí x√°c nh·∫≠n ƒë∆°n.\nShop h·ªó tr·ª£ thanh to√°n khi nh·∫≠n h√†ng (COD) ho·∫∑c chuy·ªÉn kho·∫£n üí≥."
  },

  // üöö V·∫≠n chuy·ªÉn
  {
    question: [
      "shop giao h√†ng ·ªü ƒë√¢u",
      "ph√≠ ship bao nhi√™u",
      "bao l√¢u nh·∫≠n h√†ng",
      "giao h√†ng t·∫≠n n∆°i kh√¥ng"
    ],
    answer:
      "Shop giao h√†ng to√†n qu·ªëc üáªüá≥. Th·ªùi gian giao h√†ng:\n- TP.HCM: 1‚Äì3 ng√†y\n- Ngo·∫°i t·ªânh: 3‚Äì5 ng√†y\nPh√≠ ship t·ª´ 25.000ƒë tu·ª≥ khu v·ª±c. ƒê∆°n t·ª´ 500.000ƒë ƒë∆∞·ª£c mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn üöö."
  },
  {
    question: [
      "shop m·ªü c·ª≠a l√∫c m·∫•y gi·ªù",
      "gi·ªù l√†m vi·ªác c·ªßa shop",
      "shop c√≥ l√†m cu·ªëi tu·∫ßn kh√¥ng",
      "ng√†y ngh·ªâ c·ªßa shop",
      "khi n√†o shop ƒë√≥ng c·ª≠a"
    ],
    answer:
      "‚è∞ Gi·ªù l√†m vi·ªác c·ªßa UTE Shop:\n- Th·ª© 2 ƒë·∫øn Th·ª© 7: 8h00 ‚Äì 18h00\n- Ch·ªß nh·∫≠t: ngh·ªâ.\nB·∫°n v·∫´n c√≥ th·ªÉ ƒë·∫∑t h√†ng online 24/7, shop s·∫Ω x·ª≠ l√Ω ƒë∆°n v√†o gi·ªù h√†nh ch√≠nh nh√©!"
  },
  // üîÅ ƒê·ªïi tr·∫£
  {
    question: [
      "ƒë·ªïi h√†ng sao",
      "ch√≠nh s√°ch ƒë·ªïi tr·∫£",
      "h√†ng l·ªói c√≥ ƒë·ªïi kh√¥ng",
      "ƒë·ªïi size ƒë∆∞·ª£c kh√¥ng"
    ],
    answer:
      "UTE Shop h·ªó tr·ª£ ƒë·ªïi h√†ng trong v√≤ng 3 ng√†y n·∫øu s·∫£n ph·∫©m l·ªói, nh·∫ßm size ho·∫∑c ch∆∞a s·ª≠ d·ª•ng. S·∫£n ph·∫©m c·∫ßn c√≤n nguy√™n tag, bao b√¨ v√† ch∆∞a gi·∫∑t nh√© üîÅ."
  },

  // üß∫ Khuy·∫øn m√£i
  {
    question: [
      "c√≥ khuy·∫øn m√£i kh√¥ng",
      "gi·∫£m gi√° bao nhi√™u",
      "ch∆∞∆°ng tr√¨nh sale",
      "combo √°o"
    ],
    answer:
      "Shop th∆∞·ªùng c√≥ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i nh∆∞:\nüéÅ Mua 2 √°o thun t·∫∑ng 1 m√≥c kh√≥a\nüéÅ Gi·∫£m 10% khi mua combo √°o kho√°c + √°o thun\nüéÅ Free ship ƒë∆°n h√†ng tr√™n 500.000ƒë.\nB·∫°n c√≥ th·ªÉ theo d√µi fanpage ƒë·ªÉ c·∫≠p nh·∫≠t ∆∞u ƒë√£i m·ªõi nh·∫•t!"
  },

  // üìû Li√™n h·ªá & h·ªó tr·ª£
  {
    question: [
      "li√™n h·ªá shop th·∫ø n√†o",
      "shop c√≥ fanpage kh√¥ng",
      "s·ªë ƒëi·ªán tho·∫°i shop",
      "ƒë·ªãa ch·ªâ shop"
    ],
    answer:
      "UTE Shop ƒë·ªãa ch·ªâ: 01 V√µ VƒÉn Ng√¢n, Th·ªß ƒê·ª©c, TP.HCM üè¨.\nHotline: 0977 123 456 üìû.\nFanpage: facebook.com/uteshop.\nEmail: support@uteshop.vn."
  },

  // ‚ùì H·ªèi ngo√†i ph·∫°m vi
  {
    question: [
      "h√¥m nay th·ªùi ti·∫øt sao",
      "ai l√† hi·ªáu tr∆∞·ªüng ute",
      "shop c√≥ b√°n ƒëi·ªán tho·∫°i kh√¥ng"
    ],
    answer:
      "Xin l·ªói üôè M√¨nh ch·ªâ c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn s·∫£n ph·∫©m, d·ªãch v·ª• v√† ch√≠nh s√°ch c·ªßa UTE Shop th√¥i nh√©!"
  },

  // üí¨ Giao ti·∫øp t·ª± nhi√™n
  {
    question: ["xin ch√†o", "ch√†o shop", "hi", "hello", "b·∫°n ∆°i"],
    answer: "Ch√†o b·∫°n üëã M√¨nh l√† Chatbot c·ªßa UTE Shop, m√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay n√®?"
  },
  {
    question: ["c·∫£m ∆°n", "thank you", "thanks"],
    answer: "Kh√¥ng c√≥ g√¨ ·∫° üíô C·∫£m ∆°n b·∫°n ƒë√£ gh√© UTE Shop!"
  },
  {
    question: ["t·∫°m bi·ªát", "bye", "b√°i bai"],
    answer: "H·∫πn g·∫∑p l·∫°i b·∫°n nha üëã Ch√∫c b·∫°n m·ªôt ng√†y vui v·∫ª!"
  }
];


// üîπ T·∫°o prompt gi·ªõi h·∫°n ph·∫°m vi tr·∫£ l·ªùi
const buildPrompt = (message: string) => {
  const dataText = trainingData
    .map(t => t.question.map(q => `Q: ${q}\nA: ${t.answer}`).join("\n"))
    .join("\n");
  return `
B·∫°n l√† chatbot c·ªßa UTE Fashion Shop.
Ch·ªâ tr·∫£ l·ªùi trong ph·∫°m vi d·ªØ li·ªáu sau, kh√¥ng ƒë∆∞·ª£c b·ªãa c√¢u tr·∫£ l·ªùi:

${dataText}

N·∫øu c√¢u h·ªèi ngo√†i ph·∫°m vi: "Xin l·ªói, c√¢u h·ªèi n√†y hi·ªán kh√¥ng n·∫±m trong ph·∫°m vi h·ªó tr·ª£. B·∫°n h√£y th·ª≠ l·∫°i nh√©! üôè"

Ng∆∞·ªùi d√πng h·ªèi: "${message}"
`;
};

export const getChatbotResponse = async (message: string): Promise<string> => {
  try {
    // Ki·ªÉm tra n·∫øu message tr√πng trainingData ‚Üí tr·∫£ l·ªùi tr·ª±c ti·∫øp
    const found = trainingData.find(t => t.question.some(q => message.toLowerCase().includes(q.toLowerCase())));
    if (found) return found.answer;

    // N·∫øu ngo√†i trainingData ‚Üí g·ªçi Gemini
    const response = await axios.post(API_URL, {
      contents: [{ role: "user", parts: [{ text: buildPrompt(message) }] }],
    });

    return response.data?.candidates?.[0]?.content?.parts?.[0]?.text
      || "Xin l·ªói, c√¢u h·ªèi n√†y hi·ªán kh√¥ng n·∫±m trong ph·∫°m vi h·ªó tr·ª£. B·∫°n h√£y th·ª≠ l·∫°i nh√©! üôè";
  } catch (err) {
    console.error(err);
    return "Xin l·ªói, h·ªá th·ªëng g·∫∑p s·ª± c·ªë üò¢";
  }
};

export const saveMessage = async (userId: string, message: string, role: ChatRole) => {
  const chat = new Chat({ userId, comment: message, role });
  return await chat.save();
};

export const getChatHistory = async (userId: string) => {
  return await Chat.find({ userId }).sort({ createdAt: 1 });
};
